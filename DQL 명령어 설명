DQL (Data Query Language)
데이터베이스에서 검색하고 조회하는데 사용한다
DQL은 SELECT문을 사용해서 데이터를 검색하고 필터링 하며 원하는 정보를 추출하는데 사용한다.

종류
SELECT : 테이블에서 데이터를 선택하고 반환
         필드 목록, 테이블, 조건 및 정렬을 지정할 수 있다.
FROM : SELECT 문에서 데이터를 검색할 대상 테이블을 지정한다.
  예제코드) 
  SELECT * FROM 테이블명;


WHERE : 검색 결과를 필터링하기 위한 조건을 지정한다
        특정 조건을 충족하는 행만 반환한다.
  예제코드)
  SELECT 보기원하는 열 작성
  FROM 테이블명
  WHERE 조건작성;


GROUP BY : 검색 결과를 그룹화하고 그룹 단위로 데이터를 집계할 때 사용한다.
  예제코드)
  SELECT 열이름, AVG(열이름) AS 표시하고싶은 열의 이름
  FROM 테이블명 
  GROUP BY 집계할 열이름;


HAVING : GROUP BY와 함께 사용되며, 그룹화된 데이터에 대한 조건을 지정한다.
         조건을 충족하는 그룹만 반환
  예제코드)
  SELECT 열이름, AVG(열이름) AS 표시하고싶은 열의 이름
  FROM 테이블명 
  GROUP BY 집계할 열이름;
  HAVING AVG(열이름) > 10.0; --조건지정


ORDER BY : 검색 결과를 정렬하기 위해 사용한다
            정렬할 열 및 정렬 순서를 지정해준다.
  예제코드)
  SELECT 열이름
  FROM 테이블명
  ORDER BY 열이름 DESC; --ASC;
-- ASC : 오름차순 (asc가 Default값)
-- DESC : 내림차순


UNION : 두 개 이상의 SELECT 문 결과를 결합해서 하나의 결과 집합으로 반환
  예제코드)
  SELECT 열이름 FROM 테이블1
  UNION
  SELECT 열이름 FROM 테이블2;
- union sql은 두 개 이상의 select문 결과를 합쳐서 하나의 결과 집합으로 반환하는 연산자
- 중복된 행을 제거하고 중복된 행을 포함하지 않는 결과를 생성
- selcet column1, column2....
  from table1
  union
  select column1, column2....
  from table2;

JOIN : 다수의 테이블을 연결하여 데이터를 결합하는데 사용한다
        INNER JOIN, LEFR JOIN, RIGHT JOIN, FULL OUTER JOIN 등 결합유형이 다양하다.
  예제코드)
  SELECT o.orderID, c.CName
  FROM   Order o
  INNER JOIN Customers ON o.CID = c.CID;


JOIN 내 다양한 JOIN문 설명 작성
 INNER JOIN : 데이터베이스에서 여러 테이블 간의 관계를 설정하고 데이터를 결합하는데 사용한다.
              두 개 이상의 테이블을 연결해서 공통된 값을 기준으로 행을 결합한다.
 LEFT JOIN : 왼쪽 테이블(첫번째 테이블)의 모든 행을 포함한다.
             오른쪽 테이블에서 일치하는 행을 선택한다.
             왼쪽 테이블에 있는 모든행이 결과 집합에 포함되고 오른쪽 테이블과 일치하는 행이 없으면 NULL값이 포함된다.
 RIGHT JOIN : 오른쪽 테이블의 모든 행을 포함하고 왼쪽 테이블에서 일치하는 행을 선택한다.
              오른쪽 테이블에 있는 모든 행이 결과 집합에 포함되고 왼쪽 테이블과 일치하는 행이 없으면 NULL값을 포함한다.
 FULL JOIN (FULL OUTER JOIN) : 
                  왼쪽 테이블과 오른쪽 테이블의 모든행을 포함한다.
                  양쪽 테이블의 모든 데이터를 모두 가져온다.
                  일치하는 행이 있는 경우에는 해당 데이터를 포함
                  왼쪽 테이블 또는 오른쪽 테이블의 한쪽에만 있는 데이터는 NULL값을 포함한다.
                  주로 양쪽에 있는 데이터를 모두 가져와야할 때 사용된다.

--JOIN (=INNER JOIN) 
    일치하는 행만 반환
--LEFR JOIN
    왼쪽 테이블의 모든 행을 반환
--RIGHT JOIN
    오른쪽 테이블의 모든 행 반환
--FULL JOIN
    양쪽 테이블의 모든 행을 반환

--JOIN (=INNER JOIN) 일치하는 행만 반환
--부서와 직원 테이블을 JOIN하여 각 직원의 부서 정보를 가져옴
--EMPLOYEE e
--SELECT EMPLOYEE.ENO, EMPLOYEE.ENAME,
SELECT e.ENO, e.ENAME, e.dno
FROM employee e
JOIN department d ON e.dno = d.dno;
--LEFR JOIN 왼쪽 테이블의 모든 행을 반환
--모든 부서와 부서에 속한 직원을 가져오기
--만약에 부서에 속한 직원이 없는 경우에는 부서 정보 포함하기
SELECT d.dno, d.dname, e.eno, e.ename
FROM department d
LEFT JOIN employee e on d.dno = e.dno;
--RIGHT JOIN 오른쪽 테이블의 모든 행 반환
--모든 직원과 직원이 속한 부서 정보 가져오기
--부서에 속하지 않은 경우도 직원 정보 포함
select e.eno, e.ename, d.dno, d.dname
from employee e
right join department d on e.dno = d.dno;
--FULL JOIN 양쪽 테이블의 모든 행을 반환
select d.dno, d.dname, e.eno, e.ename
from department d
full join employee e on d.dno = e.dno;

--실무에서 ORDER, GROUP, WHERE, JOIN 을 많이 쓰임


--NVL(Null Value) : null 값을 다른 값으로 대체할 때 쓰인다
SELECT ename, NVL(commission, 0) AS commission
FROM employee;

--NEXT DAY 다음 주어진 요일 날짜 찾기
--SELECT ename, next_day(sysdate, 'FRIDAY') AS next_day FROM dual;

--TRUNC : 날짜 또는 숫자의 소수부 제거
SELECT ename, TRUNC(salary) AS TRUNC_SALARY FROM employee;

--Floor, CEIL(무조건올림), ROUND : 숫자 반올림 및 내림
SELECT ename, FLOOR(salary) AS FLOOR_Salary FROM employee;
SELECT ename, CEIL(salary) AS CEIL_SALARY FROM employee;
SELECT ename, ROUND(salary,2) AS round_salary FROM employee;

--ABS(Absolute value) : 절대값 계산, -도 없앰
SELECT ename, ABS(commission) AS ABS_COMMISSION FROM employee;





CASE문
 조건에 따라 다른 결과를 반환하는데 사용
 case 문은 주로 select 문에서 사용
 다양한 조건에 따라 다른 값을 출력하거나 계산하는데 유용하다

예제코드 : 
 CASE
     WHEN 조건1 THEN 결과1 (조건에 따라 표현하고자 하는 결과작성)
     WHEN 조건2 THEN 결과2
     WHEN 조건n THEN 결과n
     ELSE 기본값
 END

코드설명 : 
 CASE 다음에 WHEN절을 사용해서 조건을 지정한다
 조건이 만족되는 경우 해당 조건의 결과를 반환한다.
 THEN 다음에 조건을 만족했을 때 반환할 결과 값을 지정해준다.
 여러 WHEN을 사용해서 여러 조건을 처리할 수 있으며, 각 조건에 해당하는 결과를 정의한다.
 ELSE는 모든 조건이 만족되지 않을 때 반환할 기본값을 정의하는데 사용된다. (ELSE는 선택사항이므로 생략가능)
 END 는 CASE문을 종료함을 나타내는 절이다.







FETCH FIRST 5 ROWS ONLY 
결과가 모여진 집합에서 첫번째 행부터 다섯번째 행까지만 번환

**FETCH 이후 진행할 것 
가장 비싼 메뉴 조회
SELECT * 
FROM menu
ORDER BY price DESC
FETCH FIRST 1 ROWS ONLY;

SELECT * FROM menu
ORDER BY price DESC
LIMIT 1;


FETCH :  데이터 조회 및 검색 목적으로 사용
         데이터베이스에서 특정 행을 가져오거나 결과 집합에서 행을 검색하는 데 사용할 수 있다.
         일반적으로 SELECT 문과 함께 사용되어 결과 집합에서 일부 행을 가져오거나 특정 순서로 정렬된 결과에서 특정 범위의 행을 검색하는데 사용한다
예제코드 : 
         --처음에 10개 행을 가져올 때
         SELECT *
         FROM 테이블
         FETCH FIRST 10 ROWS ONLY;
         --범위 지정해서 행을 검색할 때 
         --10번째부터 20번째 행을 가져올 때
         SELECT *
         FROM 테이블
         OFFSET 10 ROWS
         FETCH NEXT 10 ROWS ONLY;

FETCH FIRST : 처음 10개의 행을 가져온다
              결과 집합의 처음부터 시작하여 지정된 개수의 행을 가져온다
OFFSET 10 ROWS : 처음 10개의 행을 건너뛴 다음에 데이터 검색을 시작한다.
FETCH NEXT 10 ROWS ONLY : 그 다음 10개의 행을 가져온다.




















cf)
DDL -> 계정만들고 계정에 권한을 주고 테이블을 만드는 용어들
DML -> SELECT INSERT UPDATE DELETE
DQL -> 안에서 세부적으로 조건을 지정해줄 때 사용하는 용어들


