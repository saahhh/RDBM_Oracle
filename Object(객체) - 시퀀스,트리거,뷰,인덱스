시퀀스(Sequence) : 데이터베이스에서 사용되는 객체
                  일련의 숫자를 생성하는데 주로 사용
                  고유한 값, 주로 기본키 또는 고유 식별자 생성에 사용

예제코드 :
  CREATE SEQUENCE 어떤값의_id
          START WITH 1
          INCREMENT BY 1
          NOMAXVALUE
          NOCYCLE;

  CREATE SEQUENCE : 시퀀스를 생성하는 명령어  
  어떤값의_id : 생성하려는 시퀀스의 이름을 지정, 이 이름은 데이터베이스에서 해당 시퀀스를 식별하는데 사용한다.
  START WITH 1 : 시퀀스의 초기 시작 값을 1로 설정
  INCREMENT BY 1 : 시퀀스의 각 값이 1씩 증가하도록 설정
  NO MAX VALUE : 시퀀스가 최대값에 도달하지 않도록 설정 
  NOCYCLE : 시퀀스가 최대값에 도달하면 다시 처음으로 돌아가지 않도록 설정




트리거(Trigger) : 데이터베이스에서 발생하는 특정 이벤트에 반응하여 자동으로 실행되는 SQL 코드 조각이다.
                  데이터베이스의 상태를 감시하고 데이터 변경, 삽입, 업데이트, 또는 삭제와 같은 작업을 수행할 수 있음

예제코드 : 
  CREATE OR REPLACE TRIGGER 어떤값의_id
  BEFORE INSERT ON 테이블 
  FOR EACH ROW
  BEGIN
        SELECT 어떤값의_id_seq(시퀀스).NEXTVAL
        INTO : NEW.어떤값의_id
        FROM dual;
  END;
  /

  CREATE OR REPLACE TRIGGER : 트리거를 생성 또는 변경하는 명령
  OR REPLACE : 이미 동일한 이름의 트리거가 있는 경우 덮어쓰기를 허용하겠다는 의미
  어떤값의_id : 생성하려는 트리거의 이름을 지정하고 데이터베이스에서 해당 트리거를 식별하는데 사용
  BEFORE INSERT ON 테이블 : 테이블에 행이 삽입되기 전에 실행
  FOR EACH ROW : 트리거가 각 행별로 실행되도록 설정, 트리거 내에서 현재 행을 참조할 수 있도록 한다.
  BEGIN 및 END : 블록을 정의, 블록 내에서 트리거나 수행할 작업을 정의할 수 있다
                  현재 행에 대한 작업을 수행하거나 다른 로직을 실행하는데 사용




뷰(VIEW)
  데이터베이스에서 논리적 객체
  실제로 데이터를 저장하지 않고 쿼리 결과를 나타내는 가상 테이블
  뷰 자체에서는 데이터를 저장하거나 변경하지 않기 때문에 DML에서의 명령(INSERT, UPDATE, DELETE)을 통해 뷰를 직접 수정하는 것은 일반적으로 제한된다.

예제코드 : 
  CREATE VIEW 뷰이름생성 AS 
  SELECT 
        넣고자하는 컬럼(열이름)
  FROM 테이블명
  JOIN;

ex)
CREATE VIEW cafe_order_menu AS 
SELECT 
    o.order_id,
    c.cname AS cafe_name,
    m.menu_name,
    o.order_date,
    o.quantity,
    m.price,
    (o.quantity * m.price) AS total_price
FROM
    orders o
JOIN cafes c ON o.cafe_id = c.cafe_id
JOIN menu m ON o.menu_id = m.menu_id;




인덱스(INDEX)
  데이터베이스 성능을 향상시키는데 중요한 역할을 하는 데이터 구조
  특정 열(컬럼)에 대한 검색 및 조회 작업을 최적화 하기 위해 사용

예제코드 : 
  --employee 테이블이 있다는 가정
  CREATE TABLE employee (
          employee id NUMBER(5) PRIMARY KEY,
          name VARCHAR2(50),
          hire_date DATE

  --인덱스 생성
  CREATE INDEX indx_employee_name ON employee(name);

   (코드설명)
   indx_employee_name =생성해놓은 인덱스 이름 ON   
   employee=테이블 
   (name); = (어떤 열의 값을 기반으로 검색을 빠르게 하기 위해 작성하는 컬럼이름);

--인덱스를 사용한 SELECT 예제문
  SELECT * FROM employee WHERE name = 'KH';


 *index는 B-Tree 구조로 되어있다.
 B-Tree (Balanced Tree) : 데이터를 저장하고 효율적으로 검색하는데 사용되는 데이터 구조
                          주로 데이터베이스 시스템, 파일시스템, 디스크관리, 파일구조, 검색엔진 등 다양한 컴퓨팅 시스템에서 인덱싱에 사용된다.
 












