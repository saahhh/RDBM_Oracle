시퀀스(Sequence) : 데이터베이스에서 사용되는 객체
                  일련의 숫자를 생성하는데 주로 사용
                  고유한 값, 주로 기본키 또는 고유 식별자 생성에 사용

예제코드 :
  CREATE SEQUENCE 어떤값의_id
          START WITH 1
          INCREMENT BY 1
          NOMAXVALUE
          NOCYCLE;

  CREATE SEQUENCE : 시퀀스를 생성하는 명령어  
  어떤값의_id : 생성하려는 시퀀스의 이름을 지정, 이 이름은 데이터베이스에서 해당 시퀀스를 식별하는데 사용한다.
  START WITH 1 : 시퀀스의 초기 시작 값을 1로 설정
  INCREMENT BY 1 : 시퀀스의 각 값이 1씩 증가하도록 설정
  NO MAX VALUE : 시퀀스가 최대값에 도달하지 않도록 설정 
  NOCYCLE : 시퀀스가 최대값에 도달하면 다시 처음으로 돌아가지 않도록 설정




트리거(Trigger) : 데이터베이스에서 발생하는 특정 이벤트에 반응하여 자동으로 실행되는 SQL 코드 조각이다.
                  데이터베이스의 상태를 감시하고 데이터 변경, 삽입, 업데이트, 또는 삭제와 같은 작업을 수행할 수 있음

예제코드 : 
  CREATE OR REPLACE TRIGGER 어떤값의_id
  BEFORE INSERT ON 테이블 
  FOR EACH ROW
  BEGIN
        SELECT 어떤값의_id_seq(시퀀스).NEXTVAL
        INTO : NEW.어떤값의_id
        FROM dual;
  END;
  /

  CREATE OR REPLACE TRIGGER : 트리거를 생성 또는 변경하는 명령
  OR REPLACE : 이미 동일한 이름의 트리거가 있는 경우 덮어쓰기를 허용하겠다는 의미
  어떤값의_id : 생성하려는 트리거의 이름을 지정하고 데이터베이스에서 해당 트리거를 식별하는데 사용
  BEFORE INSERT ON 테이블 : 테이블에 행이 삽입되기 전에 실행
  FOR EACH ROW : 트리거가 각 행별로 실행되도록 설정, 트리거 내에서 현재 행을 참조할 수 있도록 한다.
  BEGIN 및 END : 블록을 정의, 블록 내에서 트리거나 수행할 작업을 정의할 수 있다
                  현재 행에 대한 작업을 수행하거나 다른 로직을 실행하는데 사용

/*
트리거 example :
CREATE TABLE book_log (
    log_id NUMBER PRIMARY KEY,
    action_type VARCHAR2(10),
    book_id NUMBER,
    log_date TIMESTAMP
);
CREATE SEQUENCE book_log_seq START WITH 1 INCREMENT BY 1;
-- 트리거 생성: 책이 INSERT 될 때마다 로그 테이블에 로그를 추가
CREATE OR REPLACE TRIGGER book_insert_trigger
AFTER INSERT ON book
FOR EACH ROW
BEGIN
    INSERT INTO book_log (log_id, action_type, book_id, log_date)
    VALUES (book_log_seq.NEXTVAL, 'INSERT', :NEW.book_id, SYSTIMESTAMP);
    DBMS_OUTPUT.PUT_LINE('책이 추가되었습니다. 책 ID: ' || :NEW.book_id);
END;
/
-- INSERT 문을 실행
INSERT INTO book (book_id, title, author, publication_year, isbn, genre, description, price, publication_date, is_available)
VALUES (22, '새로운 책', '새로운 저자', 2023, '978-1234567890', 'Fiction', '새로운 책 설명', 9.99, TO_DATE('2023-10-13', 'YYYY-MM-DD'), 'Y');



CREATE OR REPLACE TRIGGER book_trigger
AFTER INSERT OR UPDATE OR DELETE ON book
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        -- INSERT가 실행될 때
        INSERT INTO book_log (log_id, action_type, book_id, log_date)
        VALUES (book_log_seq.NEXTVAL, 'INSERT', :NEW.book_id, SYSTIMESTAMP);
    ELSIF UPDATING THEN
        -- UPDATE가 실행될 때
        INSERT INTO book_log (log_id, action_type, book_id, log_date)
        VALUES (book_log_seq.NEXTVAL, 'UPDATE', :OLD.book_id, SYSTIMESTAMP);
    ELSIF DELETING THEN
        -- DELETE가 실행될 때
        INSERT INTO book_log (log_id, action_type, book_id, log_date)
        VALUES (book_log_seq.NEXTVAL, 'DELETE', :OLD.book_id, SYSTIMESTAMP);
    END IF;
END;
/


*/





뷰(VIEW)
  데이터베이스에서 논리적 객체
  실제로 데이터를 저장하지 않고 쿼리 결과를 나타내는 가상 테이블
  뷰 자체에서는 데이터를 저장하거나 변경하지 않기 때문에 DML에서의 명령(INSERT, UPDATE, DELETE)을 통해 뷰를 직접 수정하는 것은 일반적으로 제한된다.

예제코드 : 
  CREATE VIEW 뷰이름생성 AS 
  SELECT 
        넣고자하는 컬럼(열이름)
  FROM 테이블명
  JOIN;

ex)
CREATE VIEW cafe_order_menu AS 
SELECT 
    o.order_id,
    c.cname AS cafe_name,
    m.menu_name,
    o.order_date,
    o.quantity,
    m.price,
    (o.quantity * m.price) AS total_price
FROM
    orders o
JOIN cafes c ON o.cafe_id = c.cafe_id
JOIN menu m ON o.menu_id = m.menu_id;




인덱스(INDEX)
  데이터베이스 성능을 향상시키는데 중요한 역할을 하는 데이터 구조
  특정 열(컬럼)에 대한 검색 및 조회 작업을 최적화 하기 위해 사용

예제코드 : 
  --employee 테이블이 있다는 가정
  CREATE TABLE employee (
          employee id NUMBER(5) PRIMARY KEY,
          name VARCHAR2(50),
          hire_date DATE

  --인덱스 생성
  CREATE INDEX indx_employee_name ON employee(name);

   (코드설명)
   indx_employee_name =생성해놓은 인덱스 이름 ON   
   employee=테이블 
   (name); = (어떤 열의 값을 기반으로 검색을 빠르게 하기 위해 작성하는 컬럼이름);

--인덱스를 사용한 SELECT 예제문
  SELECT * FROM employee WHERE name = 'KH';


 *index는 B-Tree 구조로 되어있다.
 B-Tree (Balanced Tree) : 데이터를 저장하고 효율적으로 검색하는데 사용되는 데이터 구조
                          주로 데이터베이스 시스템, 파일시스템, 디스크관리, 파일구조, 검색엔진 등 다양한 컴퓨팅 시스템에서 인덱싱에 사용된다.
 



WINDOW

SQL에서 사용되는 분석함수이다
   결과 집합 내에서 행의 순서와 관련된 계산을 수행할 수 있다.
   집계, 순위, 평균, 합계 등을 계산할 때 유용하다
데이터를 파티션 별로 분할하고 순서를 정의한 다음 각 파티션 내에 계산을 수행한다.

<윈도우함수>(<표현식>) OVER (
      PARTITION BY <파티션 열>
      ORDER BY <정렬 열>
      ROWS BETWEEN <시작 행> AND <끝 행>
)

<윈도우 함수> : 사용할 윈도우 함수 작성
               ex) SUM, AV, RANK 등
<표현식> : 계산을 수행할 열 또는 식
PARTITION BY : 데이터를 파티션으로 나누는데 사용할 열을 지정
ORDER BY : 각 파티션 내에서 행 순서를 정의하는데 사용할 열을 지정
ROWS BETWEEN : 계산을 수행할 행의 범위를 정의하는데 사용


ex) 예제코드 : 
SELECT order_id,order_date,total_price,
    SUM(total_price) OVER (ORDER BY order_date) AS OD
FROM orders;

SUM(total_price) OVER (ORDER BY order_date) AS OD : 이 부분이 윈도우 함수 (OD = order_date) 
 이 함수는 order_date를 기준으로 각 주문의 총 가격을 누적한 값을 반환한 것
 이 결과 집합에는 order_id, order_date, total_price,OD 열이 포함된 것
 각 주문에 대한 누적 가격을 계산할 수 있다.


SELECT order_id, order_date, total_price,
    RANK() OVER (ORDER BY order_date) AS OD
FROM orders;



RANK(), ROW_NUMBER() 함수의 차이
 결과 집합의 행에 순위를 할당하는데 사용한다

 RANK() 함수 : 동일한 값이 있는 경우 동일한 순위를 부여한다.
               동일한 값이 여러번 나타나면 동일한 순위가 여러번 반복된다.
               예를들어, 동일한 값을 가진 두 번째와 세 번째 행에 둘 다 2위를 할당한다.
                        결과 집합에서 중간에 순위를 건너뛸 수 있다.
 ROW_NUMBER() 함수 : 동일한 값이 있더라도 각 행의 고유한 순위를 부여한다.
                    동일한 값이 있는 경우에도 각 행에 중복되지 않는 순위를 할당한다.
                    예를들어, 동일한 값을 두 번째와 세 번째 행에 대해 각각 2위와 3위를 할당한다
                    결과 집합에서는 순서는 항상 연속적이다.
ROWNUM : 데이터베이스에서 사용할 수 있는 가상 열 중 하나
         검색 결과 집합의 각 행에 할당된 고유 번호를 나타낸다.
         결과 집합의 특정 행을 선택하거나 행에 번호를 할당하는데 사용된다.
  특징 : 검색 결과 집합을 처리하는 동안 생성된다.
         결과 집합에 대한 각 행에 할당된다.
         1부터 시작하여 각 행에 연속된 정수 값을 부여한다.
         원하는 행을 선택하거나 행에 일련번호를 할당할 수 있지만 결과를 정렬하거나 분할하는 작업에 영향을 주진 않는다.



PIVOT : 
 데이터베이스 쿼리에서 사용되는 연산자 또는 기능
 행 데이터를 열 데이터로 변환하는 작업을 수행
 데이터를 행과 열 간을 변환하여 요약된 결과를 얻을 수 있다
 데이터를 어떤 열 기준으로 피벗할지 정의한다.
 데이터를 피벗하고 결과 집합을 새로운 열로 구성한다.
 각 고유한 값은 열 이름이 되고, 해당 값의 집계 결과가 해당 열에 배치된다.
 결과 집합에는 기존 데이터의 행과 집계된 열이 포함된다.
 
















