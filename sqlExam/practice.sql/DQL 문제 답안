--직원수가 3명 이상인 부서의 부서 번호와 직원수 찾기
select dno, count(*)
  from employee
  group by dno
  having count(*) >= 3;

-- 각 부서에서 가장 높은 급여를 받는 직원 찾기
  -- having max(salay) = ( select max(salary_ from employee)
  select dno, max(salary)
    from employee
    group by dno;
                        
--급여 중간값이 3500 이상인 부서 찾기 having MEDIAN(SALARY) >= 3500;
select dno, median(salary)
  from employee
  group by dno
  having median(salary) >= 3500;
                        
--부서와 직책별로 직원 수가 2명 이상인 경우 찾기 count group by 2개 나올 수 있음
select don, job
  from employee
  group by dno,job
  having count(*)>=2;
                        
--모든 부서의 평균 급여를 구하기
select dno, avg(salary) 
from employee
group by dno;
                        
--급여가 4000 이상인 직원 수를 찾기
select dno, count(*) 
from employee
where salary >= 4000
group by dno;
                        
--부서별로 가장 높은 급여 찾기
select dno, max(salary)
from employee
group by dno;
                        
--부서별로 직원 수가 3명 이상인 부서 찾기
select dno, count(*)
from employee
group by dno
having count(*) >= 3;
                        
--부서별로 직원 수가 0인 부서 찾기
select dno, count(*)
from employee
group by dno
having count(*) = 0;
                        
--부서별로 급여 합계를 구하고, 합계가 20000 이상인 부서 찾기
select dno, sum(salary)
from employee
group by dno
having sum(salary) > = 20000;
                        
--각 부서에서 가장 오래된 직원 찾기
select dno, max(hiredate)
from employee
group by dno;

--부서별로 직원의 직무 수 찾기
select dno, job, count(*)
from employee
group by dno, job;

--부서별로 최소 급여가 3000 이상인 직원 찾기
select dno, min(salary)
from employee
group by dno
having min(salary) >= 3000;
--부서별로 급여 합계가 10000 이상이고 직원 수가 2명 이상인 부서 찾기
select dno, sum(salary), count(*)
from employee
group by dno
having sum(salary) > = 10000 and count(*) >= 2;

--부서별로 직원의 입사일자가 2023-01-01 이후인 직원 수 찾기
select dno, count(*)
from employee
where hiredate >= to_date('2023-01-01', 'YYYY-MM-DD')
group by dno;
                        
--급여가 가장 높은 직원 찾기
select ename, salary
from employee
where salary = (select max(salary) from employee);
                        
--급여가 가장 높은 직무 찾기 
select job, max(salary)
from employee
group by job;

--급여가 두 번째로 높은 직원
SELECT ENAME, SALARY
FROM EMPLOYEE
WHERE SALARY = (SELECT DISTINCT SALARY
                 FROM (SELECT dinstict SALARY 
                      FROM EMPLOYEE 
                       ORDER BY SALARY DESC)
                WHERE ROWNUM = 2);
                        
--급여 범위별로 직원 수 세기
select case
        when salary < 3000 then 'Low'
        when salary >= 3000 and salary < 5000 then 'Medium'
        else 'High'
    end , count(*)
from employee
group by case
            when salary < 3000 then 'now'
            when salary >= 3000 and salary < 5000 then 'Medium'
            else 'High'
end;
                        
--급여가 5000 이상이고 커미션을 받지 않는 직원 찾기
 select dno, name, salary
 from employee
 where salary >= 5000 and commission is null;
 
 --직원 수가 가장 많은 부서 찾기
 select dno, count(*) 
 from employee
 group by dno
 group by count(*)
 fetch first 1 row only;



필기----------------------------------------------

SELECT DNO, AVG(SALARY) AS AVGARE_SALARY;
FROM EMPOLYEE
GROUP BY DNO
HAVING AVG(SALARY) >= 4000;

--group by 와 having 사용
--직원수가 3명 이상인 부서의 부서 번호와 직원 수 찾기
SELECT dno, COUNT(eno) AS COUNT_EMPLOYEE 
FROM employee 
GROUP BY dno HAVING COUNT(eno)>=3;

-- 각 부서에서 가장 높은 급여를 받는 직원 찾기
SELECT dno, MAX(salary) AS MAX_SALARY
FROM employee
GROUP BY dno
HAVING MAX(salary) = (SELECT MAX(salary) FROM employee);
-- having max(salay) = ( select max(salary_ from employee)
--급여 중간값이 3500이상인 부서 찾기 having MEDIAN(SALARY)>=3500;
SELECT dno, MEDIAN(salary) AS MEDIAN_SALARY
FROM employee
GROUP BY dno
HAVING MEDIAN(salary) >= 3500;
--부서와 직책별로 직원 수가 2명 이상인 경우 찾기 count , group by 2개 나옴
SELECT dno, COUNT(eno) AS COUNT_DNAME
FROM employee
GROUP BY dno
HAVING COUNT(eno)>=2;
SELECT job, COUNT(eno) AS COUNT_JOB
FROM employee
GROUP BY job
HAVING COUNT(eno)>=2;

SELECT dno,job
FROM employee
GROUP BY dno,job
HAVING COUNT(*)>=2;


--GROUP BY는 필터, WHERE절은 범위를 나타냄

--급여가 4000 이상인 직원 수를 찾기
SELECT dno, COUNT(*) AS COUNT_ENO
FROM employee
WHERE salary >= 4000
GROUP BY dno;


--부서별로 가장 높은 급여 찾기
SELECT dno, MAX(salary) AS MAX_SALARY
FROM employee
GROUP BY dno;
--HAVING MAX(salary) = (SELECT MAX(salary) FROM employee);

--부서별로 직원 수가 3명 이상인 부서 찾기
SELECT dno, COUNT(eno) AS COUNT_DEPART
FROM employee
GROUP BY dno
HAVING COUNT(eno) >= 3;

--부서별로 직원 수가 0인 부서 찾기
SELECT dno, COUNT(eno) AS COUNT_DEPART
FROM employee
GROUP BY dno
HAVING COUNT(eno)=0;

--부서별로 급여 합계를 구하고, 합계가 20000 이상인 부서 찾기
SELECT dno, SUM(salary) AS SUM_SALARY
FROM employee
GROUP BY dno
HAVING SUM(salary) >= 20000;

--각 부서에서 가장 오래된 직원 찾기
SELECT dno, MAX(hiredate) AS MAX_HIREDATE
FROM emplyee
GROUP BY dno;

--부서별로 직원의 직무 수 찾기
SELECT dno,job, COUNT(*) AS DNO_JOB_COUNT
FROM employee
GROUP BY dno,job;

--부서별로 최소 급여가 3000 이상인 직원 찾기
SELECT dno, MIN(salary) AS MIN_SALARY
FROM employee
GROUP BY dno
HAVING MIN(salary) >= 3000;

--부서별로 급여 합계가 10000 이상이고 직원 수가 2명 이상인 부서 찾기
SELECT dno, sum(salary), COUNT(*) AS SALARY_SUM_EMPOLYEE
FROM employee
GROUP BY dno
HAVING SUM(salary)>=10000 and count(*)>=2;

--부서별로 직원의 입사일자가 2023-01-01 이후인 직원 수 찾기
SELECT dno, count(*)


--급여가 가장 높은 직원 찾기

--급여가 가장 높은 직무 찾기 (편집됨) 



--JOIN (=INNER JOIN) 일치하는 행만 반환
--부서와 직원 테이블을 JOIN하여 각 직원의 부서 정보를 가져옴
--EMPLOYEE e
--SELECT EMPLOYEE.ENO, EMPLOYEE.ENAME,
SELECT e.ENO, e.ENAME, e.dno
FROM employee e
JOIN department d ON e.dno = d.dno;
--LEFR JOIN 왼쪽 테이블의 모든 행을 반환
--모든 부서와 부서에 속한 직원을 가져오기
--만약에 부서에 속한 직원이 없는 경우에는 부서 정보 포함하기
SELECT d.dno, d.dname, e.eno, e.ename
FROM department d
LEFT JOIN employee e on d.dno = e.dno;
--RIGHT JOIN 오른쪽 테이블의 모든 행 반환
--모든 직원과 직원이 속한 부서 정보 가져오기
--부서에 속하지 않은 경우도 직원 정보 포함
select e.eno, e.ename, d.dno, d.dname
from employee e
right join department d on e.dno = d.dno;
--FULL JOIN 양쪽 테이블의 모든 행을 반환
select d.dno, d.dname, e.eno, e.ename
from department d
full join employee e on d.dno = e.dno;

--실무에서 ORDER, GROUP, WHERE, JOIN 을 많이 쓰임


--NVL(Null Value) : null 값을 다른 값으로 대체할 때 쓰인다
SELECT ename, NVL(commission, 0) AS commission
FROM employee;

--NEXT DAY 다음 주어진 요일 날짜 찾기
--SELECT ename, next_day(sysdate, 'FRIDAY') AS next_day FROM dual;

--TRUNC : 날짜 또는 숫자의 소수부 제거
SELECT ename, TRUNC(salary) AS TRUNC_SALARY FROM employee;

--Floor, CEIL(무조건올림), ROUND : 숫자 반올림 및 내림
SELECT ename, FLOOR(salary) AS FLOOR_Salary FROM employee;
SELECT ename, CEIL(salary) AS CEIL_SALARY FROM employee;
SELECT ename, ROUND(salary,2) AS round_salary FROM employee;

--ABS(Absolute value) : 절대값 계산, -도 없앰
SELECT ename, ABS(commission) AS ABS_COMMISSION FROM employee;

CREATE TABLE salary_info(
employee_id NUMBER PRIMARY KEY,
employee_name VARCHAR2(50),
salary NUMBER(10,2) -- 소수점 2자리까지 저장하는 급여 컬럼
);

INSERT INTO salary_info (employee_id, employee_name, salary)
VALUES (1,'멤머드',50000.50); --첫번째 직원 데이터
INSERT INTO salary_info (employee_id, employee_name, salary)
VALUES (2,'바나스',60000.75); --두번째 직원 데이터
INSERT INTO salary_info (employee_id, employee_name, salary)
VALUES (3,'박다밤',80000.88); --세번째 직원 데이터
INSERT INTO salary_info (employee_id, employee_name, salary)
VALUES (4,'맥가컾',70000.92); --네번째 직원 데이터
INSERT INTO salary_info (employee_id, employee_name, salary)
VALUES (5,'컴포즈',90000.920); --다섯번째 직원 데이터


--id가 1인 직원의 급여를 FLOOR함수 사용하여 내림
SELECT employee_id, employee_name, FLOOR(salary) AS salary_info
FROM salary_info
WHERE employee_id = 1;

--employee_id가 2인 직원의 급여 ceil 함수를 사용해서 올림
SELECT employee_id, employee_name, CEIL(salary) AS salary_info
FROM salary_info
WHERE employee_id = 2;

--employee_id가 3인 직원의 급여 round 함수를 사용해서 반올림
SELECT employee_id, employee_name, ROUND(salary) AS salary_info
FROM salary_info
WHERE employee_id = 3;

--employee_id가 4인 직원의 급여 floor 함수를 사용해서 내림
SELECT employee_id, employee_name, FLOOR(salary) AS salary_info
FROM salary_info
WHERE employee_id = 4;

--시퀀스 : 자동으로 증가하는 숫자 값을 생성하기 위한 객체
--트리거 : 특정 이벤트가 발생할 때 자동으로 실행되는 저장코드

--직원의 급여가 5000 이상인 경우 "고액"으로 표시하고 그 외는 "보통"으로 표시한다
SELECT ename, salary,
    CASE                                 --CASE는 여러 조건을 비교할 수 있고, 조건을 만족하는 경우 다른 결과를 반환한다.
        WHEN salary >= 5000 THEN '고액'  --급여가 5000이상인 경우 '고액'을 반환
        ELSE '보통'                      --위 조건에 해당하지 않는 경우 '보통'으로 반환한다.
    END AS salary_info                   --end는 case문의 끝을 나타내는 키워드
                                         --AS salary_info 새로 생성된 열에 별칭을 부여하는 것이다.
FROM employee;                           -- EMPLOYEE테이블에서

--직급에 따라 보너스 계산하는 방법
SELECT ename, job, salary,
    CASE job
        WHEN 'Manager' THEN salary * 0.15
        WHEN 'Devoloper' THEN salary * 0.1
        WHEN 'SalsePerson' THEN salary * 0.05
    END AS BONUS
FROM employee;

--급여의 범위 지정하기 5000이상'고액' 3000이상'중간'
SELECT salary,
    CASE
        WHEN salary >= 5000 THEN '고액'
        WHEN salary >= 3000 THEN '중간'
    END AS SALARY_INFO
FROM employee;

--직원의 입사한 연도에 따른 경력 계산
--활용:WHEN EXTRACT(YEAR FROM HIREDATE) = 2021 THEN '1년미만'
--2022년은 1년으로 표기하기
SELECT hiredate,
    CASE
        WHEN EXTRACT(YEAR FROM HIREDATE) = 2021 THEN '1년미만'
        WHEN EXTRACT(YEAR FROM HIREDATE) = 2022 THEN '1년'
        WHEN EXTRACT(YEAR FROM HIREDATE) = 2023 THEN '2년'
    END AS HIREDATE
FROM employee;

--직원의 급여를 천 단위로 반올림
SELECT salary, ROUND(salary,-4) AS salary_info
FROM salary_info
WHERE employee_id >=0;

--직원의 급여에 따른 등급지정
SELECT salary,
    CASE
        WHEN salary >= 80000 THEN 'A'
        WHEN salary >= 70000 THEN 'B'
        WHEN salary >= 60000 THEN 'C'
        WHEN salary >= 50000 THEN 'D'
        WHEN salary >= 40000 THEN 'E'
    END AS SALARY_GRADE
FROM salary_info;

--부서별 직원 수 계산 및 부서 유형 지정
--3명일 경우 중규모, 5명일 경우 대규모
SELECT dno, dname,
    CASE
        WHEN dno = 3 THEN '중규모'
        WHEN dno = 5 THEN '대규모'
    END AS COUNT_EMPLOYEE
FROM department;

--직원의 입사 월에 따른 경력 계산 (10월 1개월, 9월은 2개월, 나머지는 3개월 이상)
SELECT hiredate,
    CASE
        WHEN hiredate = 10 THEN '1개월'
        WHEN hiredate = 9 THEN '2개월'
        WHEN hiredate 
        
        
-- salgrade테이블에서 급여 등급을 추출하여 합치기
--직원의 이름과 연봉추출
SELECT ename, salary
FROM employee
UNION --두 개의 select결과문을 합침, 
--이 결과에서 중복 행을 제거하고 정렬된 상태로 반환
--급여등급 추출
SELECT 'salgrade' AS ename, grade AS salary
FROM salgrade; 

 

 
